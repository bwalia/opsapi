---
# Source: opsapi/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name:  {{ .Values.app }}-{{ .Release.Namespace }}-db-backup-hourly
spec:
  schedule: "0 * * * *"
  #testing 1 min "0 */1 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: "opsapi-db-backup-{{ .Release.Namespace }}-hourly"
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["/bin/sh", "-c"]
              args:
                - |
                  echo "Connecting to PostgreSQL at: $DB_HOST"

                  # Load environment variables
                  export PGPASSWORD="$DB_PASSWORD"

                  # Check if we can reach the PostgreSQL server
                  pg_isready -h "$DB_HOST" -p $DB_PORT -U "$DB_USER"

                  # Set backup file name with timestamp
                  BACKUP_FILE="/tmp/backup_$(date +'%Y-%m-%d_%H-%M-%S').sql.gz"

                  echo "Starting PostgreSQL backup..."

                  # ✅ Force TCP connection by explicitly setting -h and -p
                  pg_dump -h "$DB_HOST" -p $DB_PORT -U "$DB_USER" -d "$DATABASE" | gzip > "$BACKUP_FILE"

                  echo "Backup completed: $BACKUP_FILE"
                  if [ ! -f "$BACKUP_FILE" ]; then
                    echo "Error: Backup file was not created!"
                    exit 1
                  fi
                  # Install MinIO Client
                  curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
                  chmod +x mc && mv mc /usr/local/bin/

                  # Debugging: Ensure MinIO variables are set
                  echo "MinIO Endpoint: $MINIO_ENDPOINT"
                  echo "MinIO Bucket: $MINIO_BUCKET"

                  if [[ -z "$MINIO_ENDPOINT" || -z "$MINIO_BUCKET" ]]; then
                      echo "Error: MINIO_ENDPOINT or MINIO_BUCKET is not set"
                      exit 1
                  fi

                  # ✅ Set MinIO alias
                  mc alias set myminio "$MINIO_ENDPOINT" "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"

                  # ✅ Debug: Check if file exists before copying
                  ls -lh "$BACKUP_FILE"

                  # ✅ Upload to MinIO
                  echo "Uploading backup to MinIO..."
                  mc cp "$BACKUP_FILE" myminio/"opsapi-test-pg"/ || { echo "MinIO upload failed!"; exit 1; }

                  echo "Backup successfully uploaded to MinIO."
              volumeMounts:
                - name: {{ .Release.Name }}-backup-script
                  mountPath: /scripts
                  readOnly: true
                - name: {{ .Release.Name }}-backup-storage
                  mountPath: /backup

              env:
                - name: MINIO_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_ENDPOINT
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_ACCESS_KEY
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_SECRET_KEY
                - name: MINIO_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_BUCKET
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_HOST
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_USER
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_PASSWORD
                - name: DB_PORT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_PORT
                - name: DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DATABASE
          volumes:
            - name: {{ .Release.Name }}-backup-script
              configMap:
                name: {{ .Release.Name }}-pg-backup-{{ .Release.Namespace }}
                defaultMode: 0777  # Make it executable
            - name: {{ .Release.Name }}-backup-storage
              emptyDir: {}
      backoffLimit: 0
---
# Source: opsapi/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: opsapi-{{ .Release.Namespace }}-db-backup-daily
spec:
  schedule: "0 4 * * *"
  #testing 1 min "0 */1 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: opsapi-db-backup-{{ .Release.Namespace }}-daily
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command: ["/bin/sh", "-c"]
              args:
                - |
                  echo "Connecting to PostgreSQL at: $DB_HOST"

                  # Load environment variables
                  export PGPASSWORD="$DB_PASSWORD"

                  # Check if we can reach the PostgreSQL server
                  pg_isready -h "$DB_HOST" -p $DB_PORT -U "$DB_USER"

                  # Set backup file name with timestamp
                  BACKUP_FILE="/tmp/backup_$(date +'%Y-%m-%d_%H-%M-%S').sql.gz"

                  echo "Starting PostgreSQL backup..."

                  # ✅ Force TCP connection by explicitly setting -h and -p
                  pg_dump -h "$DB_HOST" -p $DB_PORT -U "$DB_USER" -d "$DATABASE" | gzip > "$BACKUP_FILE"

                  echo "Backup completed: $BACKUP_FILE"
                  if [ ! -f "$BACKUP_FILE" ]; then
                    echo "Error: Backup file was not created!"
                    exit 1
                  fi
                  # Install MinIO Client
                  curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
                  chmod +x mc && mv mc /usr/local/bin/

                  # Debugging: Ensure MinIO variables are set
                  echo "MinIO Endpoint: $MINIO_ENDPOINT"
                  echo "MinIO Bucket: $MINIO_BUCKET"

                  if [[ -z "$MINIO_ENDPOINT" || -z "$MINIO_BUCKET" ]]; then
                      echo "Error: MINIO_ENDPOINT or MINIO_BUCKET is not set"
                      exit 1
                  fi

                  # ✅ Set MinIO alias
                  mc alias set myminio "$MINIO_ENDPOINT" "$MINIO_ACCESS_KEY" "$MINIO_SECRET_KEY"

                  # ✅ Debug: Check if file exists before copying
                  ls -lh "$BACKUP_FILE"

                  # ✅ Upload to MinIO
                  echo "Uploading backup to MinIO..."
                  mc cp "$BACKUP_FILE" myminio/"opsapi-test-pg"/ || { echo "MinIO upload failed!"; exit 1; }

                  echo "Backup successfully uploaded to MinIO."
              volumeMounts:
                - name: {{ .Release.Name }}-backup-script
                  mountPath: /scripts
                  readOnly: true
                - name: {{ .Release.Name }}-backup-storage
                  mountPath: /backup
              env:
                - name: MINIO_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_ENDPOINT
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_ACCESS_KEY
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_SECRET_KEY
                - name: MINIO_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: MINIO_BUCKET
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_HOST
                - name: DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_USER
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_PASSWORD
                - name: DB_PORT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DB_PORT
                - name: DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Release.Name }}-secrets
                      key: DATABASE
          volumes:
            - name: {{ .Release.Name }}-backup-script
              configMap:
                name: {{ .Release.Name }}-pg-backup-{{ .Release.Namespace }}
                defaultMode: 0777  # Make it executable
            - name: {{ .Release.Name }}-backup-storage
              emptyDir: {}
      backoffLimit: 0
